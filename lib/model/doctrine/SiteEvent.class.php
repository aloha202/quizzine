<?php

/**
 * SiteEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    cms
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class SiteEvent extends BaseSiteEvent {

    protected static $default_replacements = array();
    protected static $_site_events = null;
    public static function fire($type, $object = null, $default_replacements = array()) {
        self::$default_replacements = $default_replacements;
		$event = self::getEvent($type);
        if ($event) {
            $s_event = new SiteEvent;
            $s_event['type'] = $type;
            $message = '';

            if (!empty($event['email_user'])) {
                if (!empty($event['email_user']['callback'])) {
                    call_user_func_array($event['email_user']['callback'], array($object));
                } else {
                    $to = self::getEmailFromObject($object);
                    if ($to) {
                        $email = self::processEmailBlock($event['email_user'], $object);
                        
                        ProjectHelper::sendEmail($to, $email['subject'], $email['message'], $email['attach']);
                        $s_event->setUserEmail($email['message']);
                        $message = $email['message'];
                    } else {
                        AppError::fire("Can't get email from object " . get_class($object));
                    }
                }
            }
            /*
            if (!empty($event['email_all'])) {
                $ae_subject = $event['email_all']['subject'];
                $ae_message = $event['email_all']['message'];
                $users = !empty($event['email_all']['users_list_callback']) ? call_user_func_array($event['email_all']['users_list_callback'], array($object)) : self::getAllUsers($object);
                foreach ($users as $user) {
                    $replacements = array_merge($replacements, self::getReplacementsFromObject($user));
                    if (strpos($ae_message, 'p::') === 0) {
                        $partial = str_replace('p::', '', $ae_message);
                        $ae_message = self::getPartial($partial, array('object' => $object, 'user' => $user));
                    }
                    if ($replacements) {
                        $ae_subject = strtr($ae_subject, $replacements);
                        $ae_message = strtr($ae_message, $replacements);
                    }
                    ProjectHelper::sendEmail($user->getEmailAddress(), $ae_subject, $ae_message);
                }
            }
             * 
             */

            if (!empty($event['email_admin'])) {
                if (!empty($event['email_admin']['callback'])) {
                    call_user_func_array($event['email_admin']['callback'], array($object));
                } else {
                    $email = self::processEmailBlock($event['email_admin'], $object);
                    ProjectHelper::sendAdminEmail($email['subject'], $email['message'], $email['attach']);
                    $s_event->setAdminEmail($email['message']);
                    $message = $email['message'];
                }
            }


            if (!empty($event['message'])) {
                $message = $event['message'];
                $message = self::replaceTemplate($message, $object);
            }

            $s_event->setDescription($message);
            $s_event->save();
        } else {
            AppError::fire("Unknown site event {" . $type . "}");
        }
    }

    public static function getEmailFromObject($object) {
        return ProjectHelper::getEmailFromObject($object);
    }

    public static function getDefaultReplacements() {
		return array_merge(array(
					'footer' => self::getDefault('footer')
						), self::$default_replacements);
    }

    public static function getReplacementsFromObject($object) {
        $array = $object->toArray();
        $reps = array();
        foreach ($array as $key => $value) {
            $reps["%$key%"] = $value;
        }
        if (method_exists($object, 'getReplacements')) {
            $reps = array_merge($reps, $object->getReplacements());
        }
        return $reps;
    }

    public static function getPartial($templateName, $vars = array()) {
        $context = sfContext::getInstance();

        // partial is in another module?
        if (false !== $sep = strpos($templateName, '/')) {
            $moduleName = substr($templateName, 0, $sep);
            $templateName = substr($templateName, $sep + 1);
        } else {
            $moduleName = $context->getActionStack()->getLastEntry()->getModuleName();
        }
        $actionName = '_' . $templateName;

        $view = new sfPartialView($context, $moduleName, $actionName, '');
        $view->setPartialVars(true === sfConfig::get('sf_escaping_strategy') ? sfOutputEscaper::unescape($vars) : $vars);

        return $view->render();
    }

    public static function getAllUsers($object = null) {
        $users = Q::c('sfGuardUser', 'u')
                ->where('u.is_active = ?', true)
                ->execute()
        ;
        return $users;
    }
    
    public static function extractReplacements($template)
    {
        $replacements = array();
        if(preg_match_all('/\{%.*?%\}/', $template, $matches)){
            foreach($matches[0] as $tainted){
                $replacements[] = str_replace(array('{%', '%}'), '', $tainted);
            }
        }
        return $replacements;
        
    }
    
    public static function replaceTemplate($str_tpl, $object, $add_replacements = array())
    {
        $replacements = self::extractReplacements($str_tpl);
        $object_replacements = array();
        $default_replacements = self::getDefaultReplacements();
        if (method_exists($object, 'getReplacements')) {
            $object_replacements = $object->getReplacements();
        }
        $strtr_array = array();
        foreach($replacements as $name){
            if(strpos($name, 'c::') !== 0){
                if(isset($default_replacements[$name])){
                    $strtr_array['{%' . $name . '%}'] = $default_replacements[$name];
                }
                if(isset($object_replacements[$name])){
                    $strtr_array['{%' . $name . '%}'] = $object_replacements[$name];
                }
                if(isset($object[$name])){
                    $strtr_array['{%' . $name . '%}'] = $object[$name];
                }
                if(method_exists($object, 'get' . sfInflector::camelize($name))){
                    $strtr_array['{%' . $name . '%}'] = $object->{'get' . sfInflector::camelize($name)}();
                }
            }else{
                $strtr_array['{%' . $name . '%}'] = MyConfig::get(str_replace('c::', '', $name));
            }
            if(isset($add_replacements[$name])){
                $strtr_array['{%' . $name . '%}'] = $add_replacements[$name];
            }
        }
        return strtr($str_tpl, $strtr_array);
        
    }
    
    public static function processEmailBlock($block, $object)
    {
        if(!empty($block['template'])){
            $template = Doctrine::getTable('EmailTemplate')->findOneByName($block['template']);
            if(!$template){
                AppError::fire('Could not find Email template: ' . $block['template']);
            }
            $subject = $template->getSubject();
            $message = $template->getMessage();
        }else{
            $subject = $block['subject'];
            $message = $block['message'];
        }
        if (strpos($message, 'p::') === 0) {
            $partial = str_replace('p::', '', $message);
            $message = self::getPartial($partial, array('object' => $object));
        }
        $subject = self::replaceTemplate($subject, $object);
        $message = self::replaceTemplate($message, $object);
        
        $filename = false;
        if(!empty($block['attach'])){
            $method = 'get' . sfInflector::camelize($block['attach']);
            if(method_exists($object, $method)){
                $filename = $object->{$method}();
            }
        }        
        
        return array('message' => $message, 'subject' => $subject, 'attach' => $filename);
                
    }
    
	public static function getEvent($type){
		if(!self::$_site_events){
			self::_loadSiteEvents();
		}
		return isset(self::$_site_events['all']['events'][$type]) ? self::$_site_events['all']['events'][$type] : null;
	}
	
	public static function getDefault($name, $default = ''){
		if(!self::$_site_events){
			self::_loadSiteEvents();
		}		
		return isset(self::$_site_events['all']['default'][$name]) ? self::$_site_events['all']['default'][$name] : $default;
	}
	
	protected static function _loadSiteEvents() {
		$cache_file = sfConfig::get('sf_cache_dir') . '/site_events.php';
		if(!file_exists($cache_file)){
			self::$_site_events = sfYaml::load(sfConfig::get('sf_config_dir') . '/site_events.yml');
			file_put_contents($cache_file, "<?php
				return " . P::asPhp(self::$_site_events) . ';');
		}else{
			self::$_site_events = include $cache_file;
		}		
	}

}