<?php

/**
 * LocalizationTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class LocalizationTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object LocalizationTable
     */
    public static $to_from_table = array(
        'en' => 'ru'
    );
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Localization');
    }
    
    public static function getDictionaryJson($lang, $force_overwrite = false)
    {
        $field = self::$to_from_table[$lang] ?: 'en';
        $q = Q::c('Localization', 'l')
                ->setHydrationMode(Doctrine::HYDRATE_ARRAY)
                ->select("l.id, l.$field")
                ->where("l.$field IS NOT NULL")
                ->addWhere("l.$field != ?", '')
                ;
        if(!$force_overwrite){
            $q->addWhere("l.$lang IS NULL");
        }
        $localization = array(   );
        foreach($q->execute() as $loc){
            $localization[] = array('id' => $loc['id'], 'text' => $loc[$field]);
        }       
        return json_encode($localization);
    }
    
    public static function findOne($model, $pk, $field)
    {
        $q = Q::c('Localization', 'l')
                ->where('l.model = ?', $model)
                ->addWhere('l.pk = ?', $pk)
                ->addWhere('l.field = ?', $field)
                ;
        return $q->fetchOne();
    }
    
    public static function tmList(Doctrine_Query $q)
    {
        $a = $q->getRootAlias();
        $condition = array();
        foreach(sfContext::getInstance()->get('langs') as $lang){
            $condition[] = "$a.$lang IS NOT NULL";
        }
        $q->addWhere(join(' OR ', $condition));
        return $q;
    }
    
    public static function localize($model_name, $object, $field, $lang, $options)
    {
        $val = $object->get($field);
        $val = strip_tags($val);
        $loc = LocalizationTable::findOne($model_name, $object->getId(), $field);        
        if($loc){
            if(!$options['only-create']){
                if($loc->get($lang) != $val){
                    $loc->set($lang, $val);
                    $loc->save();
                    return 'updated';
                }
            }
            return 'skipped';
        }else{
            $loc = new Localization;
            $loc->fromArray(array(
               'model' => $model_name,
                'pk' => $object->getId(),
                'field' => $field,
                $lang => $val
            ));
            $loc->save();
            return 'created';
        }        
    }
}