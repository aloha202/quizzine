<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ForgotPassword', 'doctrine');

/**
 * BaseForgotPassword
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property string $email
 * @property string $hash
 * @property sfGuardUser $User
 * 
 * @method integer        getUserId()  Returns the current record's "user_id" value
 * @method string         getEmail()   Returns the current record's "email" value
 * @method string         getHash()    Returns the current record's "hash" value
 * @method sfGuardUser    getUser()    Returns the current record's "User" value
 * @method ForgotPassword setUserId()  Sets the current record's "user_id" value
 * @method ForgotPassword setEmail()   Sets the current record's "email" value
 * @method ForgotPassword setHash()    Sets the current record's "hash" value
 * @method ForgotPassword setUser()    Sets the current record's "User" value
 * 
 * @package    cms
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseForgotPassword extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('forgot_password');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('hash', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}