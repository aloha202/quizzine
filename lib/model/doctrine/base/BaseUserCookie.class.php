<?php

/**
 * BaseUserCookie
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $cookie
 * @property integer $user_id
 * @property boolean $keep_logged_in
 * @property sfGuardUser $User
 * 
 * @method string      getCookie()         Returns the current record's "cookie" value
 * @method integer     getUserId()         Returns the current record's "user_id" value
 * @method boolean     getKeepLoggedIn()   Returns the current record's "keep_logged_in" value
 * @method sfGuardUser getUser()           Returns the current record's "User" value
 * @method UserCookie  setCookie()         Sets the current record's "cookie" value
 * @method UserCookie  setUserId()         Sets the current record's "user_id" value
 * @method UserCookie  setKeepLoggedIn()   Sets the current record's "keep_logged_in" value
 * @method UserCookie  setUser()           Sets the current record's "User" value
 * 
 * @package    cms
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUserCookie extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user_cookie');
        $this->hasColumn('cookie', 'string', 80, array(
             'type' => 'string',
             'length' => 80,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('keep_logged_in', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));


        $this->index('cookie', array(
             'fields' => 
             array(
              0 => 'cookie',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}