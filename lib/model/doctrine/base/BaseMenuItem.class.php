<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('MenuItem', 'doctrine');

/**
 * BaseMenuItem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $root_name
 * @property enum $type
 * @property integer $page_id
 * @property integer $cms_module_id
 * @property string $route
 * @property string $external
 * @property boolean $is_empty
 * @property boolean $is_auth
 * @property string $icon_class
 * @property Page $Page
 * 
 * @method string   getName()          Returns the current record's "name" value
 * @method string   getRootName()      Returns the current record's "root_name" value
 * @method enum     getType()          Returns the current record's "type" value
 * @method integer  getPageId()        Returns the current record's "page_id" value
 * @method integer  getCmsModuleId()   Returns the current record's "cms_module_id" value
 * @method string   getRoute()         Returns the current record's "route" value
 * @method string   getExternal()      Returns the current record's "external" value
 * @method boolean  getIsEmpty()       Returns the current record's "is_empty" value
 * @method boolean  getIsAuth()        Returns the current record's "is_auth" value
 * @method string   getIconClass()     Returns the current record's "icon_class" value
 * @method Page     getPage()          Returns the current record's "Page" value
 * @method MenuItem setName()          Sets the current record's "name" value
 * @method MenuItem setRootName()      Sets the current record's "root_name" value
 * @method MenuItem setType()          Sets the current record's "type" value
 * @method MenuItem setPageId()        Sets the current record's "page_id" value
 * @method MenuItem setCmsModuleId()   Sets the current record's "cms_module_id" value
 * @method MenuItem setRoute()         Sets the current record's "route" value
 * @method MenuItem setExternal()      Sets the current record's "external" value
 * @method MenuItem setIsEmpty()       Sets the current record's "is_empty" value
 * @method MenuItem setIsAuth()        Sets the current record's "is_auth" value
 * @method MenuItem setIconClass()     Sets the current record's "icon_class" value
 * @method MenuItem setPage()          Sets the current record's "Page" value
 * 
 * @package    cms
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMenuItem extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('menu_item');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('root_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'empty',
              1 => 'page',
              2 => 'module',
              3 => 'route',
              4 => 'external',
             ),
             'default' => 'empty',
             ));
        $this->hasColumn('page_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('cms_module_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('route', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('external', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('is_empty', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('is_auth', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('icon_class', 'string', 32, array(
             'type' => 'string',
             'length' => 32,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Page', array(
             'local' => 'page_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnName' => 'root_id',
             ));
        $this->actAs($nestedset0);
    }
}